const{spawn:e}=require("child_process"),t=require("path"),{readRegistryKeySafe:s}=require("../../registry"),o=require("../../logger"),{Shell:r}=require("./shared"),l=r.Cmd;function n(e,t){t.stderr.on("data",t=>{const s=t instanceof Buffer?t.toString():t;o.debug(`[${e}] stderr: '${s}'`)}),t.on("exit",t=>{0!==t&&o.debug(`[${e}] exit code: ${t}`)})}exports.Default=r.Cmd,exports.parse=function(e){return e===r.Cmd?r.Cmd:e===r.PowerShell?r.PowerShell:e===r.GitBash?r.GitBash:l},exports.getAvailableShells=async function(){const e=[{shell:r.Cmd,path:process.env.comspec||"C:\\Windows\\System32\\cmd.exe"}],o=await s("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\PowerShell.exe");if(o.length>0){const t=o[0].value.replace(/^%SystemRoot%/i,process.env.SystemRoot||"C:\\Windows");e.push({shell:r.PowerShell,path:t})}const l=await s("HKEY_LOCAL_MACHINE\\SOFTWARE\\GitForWindows");if(l.length>0){const s=l.find(e=>"InstallPath"===e.name);s&&e.push({shell:r.GitBash,path:t.join(s.value,"git-bash.exe")})}return e},exports.launch=async function(t,s){const o=t.shell;if(o===r.PowerShell){n("PowerShell",e("START",["powershell","-NoExit","-Command",`"Set-Location -LiteralPath '${s}'"`],{shell:!0,cwd:s}))}else if(o===r.GitBash){n("Git Bash",e(`"${t.path}"`,[`--cd="${s}"`],{shell:!0,cwd:s}))}else{if(o!==r.Cmd)throw new Error(`Unknown shell: ${o}`);n("CMD",e("START",["cmd"],{shell:!0,cwd:s}))}};