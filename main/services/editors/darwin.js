const{ExternalEditor:e}=require("./shared"),t=require("app-path"),o=require("path"),r=require("path-exists"),n=require("../../logger");function i(t,r){switch(t){case e.Atom:return o.join(r,"Contents","Resources","app","atom.sh");case e.WebStorm:return o.join(r,"Contents","MacOS","webstorm");case e.VisualStudioCode:return o.join(r,"Contents","Resources","app","bin","code");case e.SublimeText:return o.join(r,"Contents","SharedSupport","bin","subl");default:return new Error(`Unknown external editor: ${t}`)}}function a(t){switch(t){case e.Atom:return["com.github.atom"];case e.WebStorm:return["com.jetbrains.WebStorm"];case e.VisualStudioCode:return["com.microsoft.VSCode","com.microsoft.VSCodeInsiders"];case e.SublimeText:return["com.sublimetext.3"];default:return new Error(`Unknown external editor: ${t}`)}}exports.parse=function(t){return t===e.VisualStudioCode?e.VisualStudioCode:t===e.SublimeText?e.SublimeText:t===e.Atom?e.Atom:t===e.WebStorm?e.WebStorm:null};const u=async function(e){const o=a(e);for(const a of o)try{const o=i(e,await t(a));if(await r(o))return o;n.info(`Command line interface for ${e} not found at '${o}'`)}catch(t){n.error(`Unable to locate ${e} installation`,t)}return null};exports.getAvailableEditors=async function(){const t=[],[o,r,n,i]=await Promise.all([u(e.Atom),u(e.VisualStudioCode),u(e.SublimeText),u(e.WebStorm)]);return o&&t.push({name:"Atom",editor:e.Atom,path:o}),r&&t.push({name:"VisualStudioCode",editor:e.VisualStudioCode,path:r}),n&&t.push({name:"SublimeText",editor:e.SublimeText,path:n}),i&&t.push({name:"WebStorm",editor:e.WebStorm,path:i}),t};