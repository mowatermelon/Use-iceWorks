const s=require("ramda"),e=require("../../logger"),t=require("tree-kill"),o=require("./startProcess");class r{constructor(){this.jobs={},this.paths=[]}add(s,e,t){const r=new o(s,e);r.on("exit",(e,o,r)=>{this.remove(s),t(e,o,r)}),this.jobs[s]=r,this.paths.push(s)}stop(s){this.jobs[s]&&this.jobs[s].stop()}remove(e){delete this.jobs[e],this.paths=s.filter(s=>s!==e,this.paths)}has(e){return-1!==s.indexOf(e,this.paths)}destroyByWindows(){return 0==Object.keys(this.jobs)?Promise.resolve():Promise.all(Object.keys(this.jobs).map(s=>{const o=this.jobs[s]&&this.jobs[s].pid;return o?new Promise(r=>{t(parseInt(o,10),"SIGINT",t=>{t||(this.remove(s),e.debug("destory dev process of windows:",s,o)),r()})}):Promise.resolve()}))}destroy(){Object.keys(this.jobs).forEach(s=>{this.jobs[s].kill("SIGINT"),this.remove(s),e.debug("destory dev process of mac",s)})}checkRuning(){return this.paths.length>0}}module.exports=new r;