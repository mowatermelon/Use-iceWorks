const{fork:t}=require("child_process"),{getEnv:e}=require("../../env"),{NPM_CLI:s}=require("../../paths"),i=require("../../logger"),r=require("tree-kill"),o=require("../../terminal"),n=require("events");class l extends n{constructor(r,n){super(),this.projectPath=r,i.debug("start:",r,n),this.job=t(s,["run","start","--scripts-prepend-node-path=auto"],{cwd:r,env:Object.assign({},e(),{PORT:n}),silent:!0,detached:!0});let l="",d="";this.job.stdout.on("data",t=>{const e=t+"";l+=e,o.send(r,e.trim())}),this.job.stderr.on("data",t=>{const e=t+"";d+=e,o.send(r,e.trim())}),this.job.on("exit",t=>{o.send(r,"dev process exit:",r,t),0!==t?this.killFromActive?this.emit("exit",0,null,null):this.emit("exit",t,l,d):this.emit("exit",t,null,null)})}stop(){const t=this.pid;t&&(this.killFromActive=!0,r(parseInt(t,10),"SIGINT",e=>{e||i.debug("stop dev process",this.projectPath,t)}))}kill(t){this.job.kill(t)}get pid(){return this.job.pid}}module.exports=l;