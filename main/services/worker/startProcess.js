const{fork:t}=require("child_process"),e=require("events"),i=require("tree-kill"),{getEnv:s}=require("../../env"),{NPM_CLI:r}=require("../../paths"),o=require("../../logger"),n=require("../../terminal"),l=require("./startLogDetection");class d extends e{constructor(e,i){super(),this.projectPath=e,o.debug("start:",e,i),this.job=t(r,["run","start","--scripts-prepend-node-path=auto"],{cwd:e,env:Object.assign({},s(),{PORT:i}),silent:!0,detached:!0});let d="",u="";this.job.stdout.on("data",t=>{const i=t+"";d+=i,l(e,i.trim()),n.send(e,i.trim())}),this.job.stderr.on("data",t=>{const i=t+"";u+=i,n.send(e,i.trim())}),this.job.on("exit",t=>{n.send(e,"dev process exit:",e,t),0!==t?this.killFromActive?this.emit("exit",0,null,null):this.emit("exit",t,d,u):this.emit("exit",t,null,null)})}stop(){const t=this.pid;t&&(this.killFromActive=!0,i(parseInt(t,10),"SIGINT",e=>{e||o.debug("stop dev process",this.projectPath,t)}))}kill(t){this.job.kill(t)}get pid(){return this.job.pid}}module.exports=d;