const e=require("path"),t=require("babylon"),r=require("@babel/generator").default,o=require("@babel/types");function n(e){const t=[],r=a(e);if(!r)return e;const o=r.declarations[0],{init:{elements:n}}=o;return n.forEach((e,r)=>{let o=!1,n=!1;Array.isArray(e.properties)&&e.properties.forEach(e=>{switch(e.key.name){case"indexRoute":o=!0;break;case"childRoutes":e.value&&e.value&&e.value.elements&&e.value.elements.length>0&&(n=!0)}}),n||o||t.push(r)}),t.sort().reverse().forEach(e=>{o.init.elements.splice(e,1)}),e}function a(e=[]){const t=e.find(e=>{const{type:t,declarations:r}=e||{};return"VariableDeclaration"===t&&r&&i(r&&r[0]&&r[0].id,"autoGeneratedRoutes")});return t||null}function i(e,t){const r=e&&"Identifier"===e.type;return t?r&&e&&e.name===t:r}exports._parseRoute=(e=>{return t.parse(e,{sourceType:"module",plugins:["jsx"]})}),exports._generateRoute=(e=>r(e,{})),exports.addRoute=((e,t,r="before")=>{const n=a(e);if(!n)return console.log("add route failed","not found route variable declaration."),e;const i=n.declarations[0],{init:{elements:s}}=i;const l=function e(t){return Object.keys(t).map(r=>{const n=t[r],a=Array.isArray(n)?o.identifier(JSON.stringify(n)):"object"==typeof n?o.objectExpression(e(n)):/^id /.test(n)?o.identifier(n.slice(3)):o.stringLiteral(n);return o.objectProperty(o.identifier(r),a)})}(t),u=o.objectExpression(l);return"before"===r?s.unshift(u):"after"===r&&s.push(u),e}),exports.addImports=((e,t=[])=>{const r={},n=a(e);return e.forEach(e=>{const{type:t,source:o,specifiers:n}=e||{},a="ImportDeclaration"===t;return a&&(r[n[0].local.name]=o.value),a}),n&&delete n.start,t.filter(e=>{const{type:t,ref:o}=e,n=`./${t}s/${o}`;return!(o in r)&&(e.path=n,!0)}).forEach(({ref:t,path:r},n)=>{e.unshift(o.importDeclaration([o.importDefaultSpecifier(o.identifier(t))],o.stringLiteral(r)))}),e}),exports.removeImports=((e,t=[])=>{const r={};e.forEach(({type:e,specifiers:t},o)=>{"ImportDeclaration"===e&&(r[t[0].local.name]=o)}),t.map(({ref:e})=>r[e]).filter(e=>void 0!==e).sort().reverse().forEach(t=>{e.splice(t,1)})}),exports.removeRoute=((e,t)=>{const r=t.replace(/^\//,"").split("/");0===r.length&&r.push("/");const i=a(e);if(!i)return console.log("remove failed","not found route var declaration"),e;const s=i.declarations[0],{init:{elements:l}}=s;return s.init.elements=l.filter((e,t)=>{let n=!0;return e.properties.forEach(e=>{if(e.key&&"path"===e.key.name&&e.value.value==="/"+r[0]&&void 0===r[1])n=!1;else if(e.key&&"childRoutes"===e.key.name&&r.length>1&&o.isArrayExpression(e.value)&&e.value.elements.length>0){const t=r.slice(1).join("/");e.value.elements=e.value.elements.filter(e=>{let r=!0;return e.properties.forEach(e=>{e.key&&"path"===e.key.name&&e.value.value===t&&(r=!1)}),r})}}),n}),n(e)}),exports.removeRouteByPageName=function(t,r){const s=[],l=a(t);if(!l)return console.log("remove failed","not found route var declaration"),t;const u=l.declarations[0],{init:{elements:c}}=u,p=[];return c.forEach((t,n)=>{let a="";const l=[];t.properties.forEach(e=>{e.key&&"indexRoute"===e.key.name?e.value.properties.forEach(e=>{i(e.key,"component")&&i(e.value,r)&&p.push(n)}):e.key&&"childRoutes"===e.key.name&&o.isArrayExpression(e.value)&&e.value.elements.length>0?e.value.elements=e.value.elements.filter(e=>{let t=!0,o="";return e.properties.forEach(e=>{e.key&&"component"===e.key.name&&i(e.value,r)&&(t=!1),e.key&&"path"===e.key.name&&(o=e.value.value)}),t||l.push(o),t}):e.key&&"path"===e.key.name&&(a=e.value.value)}),l.forEach(t=>{s.push(e.join(a,t))})}),p.forEach(e=>{c[e].properties=c[e].properties.filter(e=>!i(e.key,"indexRoute"))}),n(t),s};